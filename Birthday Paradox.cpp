/*
	Problem Definition:
		To verify if Birthday Paradox is indeed valid.

	Author:
		BYTErians Group,
		Group no. 28

	How to verify? --
		For verification of the birthday paradox, we are using birthday of person as a random no. between 1 to 
		365 generated by the in built function.
	
*/

#include<iostream>
using namespace std;
#include<time.h>
#include<stdlib.h>

int main()
{
	int no_of_tests;
	cout<<"For how many times do you want to verify?\t";	cin>>no_of_tests;

	while(no_of_tests--)
	{
		int no_of_persons;
		cout<<"Enter no. of persons to be considered for experiment:\t"; 	cin>>no_of_persons;

		/*
			Find no of possible pairs of persons from this group:--

			no_of_pairs=(no_of_persons)
										C 
										  (2)


					            no_of_persons * (no_of_persons - 1)
					     =    ________________________________
					     						2
		*/
		int no_of_pairs = no_of_persons * (no_of_persons - 1) / 2;
		
		/*   
			Probability of one pair having bithday on same day is 1/365
			therefore, having birthdays on different days is 364/365
			now if there are n pairs, then:--

			since birthday of one pair is independent of birthday of another pair,
			we can conclude that,
			probability of all pairs having different birthday=
					(probability of one pair having different birthday) raised to (no of pairs)
		
			Once we have probability of all pairs having different birthdays, we can find probability of at least one
			pair having same birthday by just subtracting it from one
		*/


		/*
			Probability of one pair having birthday on different days
		*/
		double prob_of_one_pair_diff_bday = (double)364/365;


		/*	
			Find probability of all pairs having bithdays on different days
				= (prob_of_one_pair_diff_bday)^(no_of_pairs)

								 (no of possible pairs)
				     (    364	  ) ^	
				=   ( ______ )
				      (   365	  )
		*/
		double prob_of_all_pair_diff_bday = 1;
		for(int i=0; i<no_of_pairs; i++)
			prob_of_all_pair_diff_bday *= prob_of_one_pair_diff_bday;

		/*
			Probability of at least one pair having same birthday = 
				1 - (Probability of having all pairs having different birthdays)
		*/

		double prob_of_at_least_one_pair_same_birthday = 1 - prob_of_all_pair_diff_bday;
		
		cout<<"Theoratically, Probability of having at least 2 persons sharing the same birthday is "
			<<prob_of_at_least_one_pair_same_birthday;

		/*Lets check it practically now*/
		cout<<"\n\n\nNow practically we will check..."<<endl;

		int no_of_experiments;

		cout<<"Enter how many times do you want check for same no of persons? ";  cin>>no_of_experiments;

		int success=0;
		int counter=0;
		while(counter < no_of_experiments)
		{
			int birthdays_of_persons[no_of_persons];

			/*Randomly generating birthdays of persons*/
			srand(time(NULL)*counter);
			for(int i=0; i<no_of_persons; i++)
				birthdays_of_persons[i]= (rand()%365)+1;

							/*Display the generated birthdays*/
							/*for(int i=0; i<no_of_persons; i++)
								cout<<"Birthday of person no. "<<i+1<<" is "<<birthdays_of_persons[i]<<endl;
							*/

			/*
				Now we check if at least one pair share birthdays.

				For this, we can check it by O(n^2) complexity solution, by comparing birthday of each person
				with everyone. 
				
				But we use a better method which will always need 365 iterations.
				Hence if the no. of persons are less than 20-21, then O(n^2) solution will be better; but
				in all other cases where no. of persons are more, our method will start giving the fruits in
				terms of efficiency.

			*/



			/*
				With the following block of code:-
					We are finding, for each perticular day, how many people have birthdays on that day.
					for each day to be covered, there is need of 365 integers each of which is initialized to
					zero.
			*/

			/*
				This array will have count of no of persons having birthday on that perticular  day no.
			*/
			
			int birthdays_per_day[366]={0};
			for(int i=0; i<no_of_persons; i++)
				++birthdays_per_day[birthdays_of_persons[i]];

			/*
				now we check all 365 days, to see if birthdays count is more than one.
				that means, there are more than one persons sharing birthday on same day.
			*/
			for(int i=1; i<=365; i++)
				if(birthdays_per_day[i] > 1)
				{
					++success;
					break;
				}
			
			++counter;
		}

		cout<<"In "<< success << " out of " << no_of_experiments << " cases, we got success."<<endl;

		cout<<"Therefore the practical ratio is "<<(float)success/ no_of_experiments<<endl;
		cout<<"and theoratical probability was "<<prob_of_at_least_one_pair_same_birthday<<endl;
	}		
	
	return 0;
}
